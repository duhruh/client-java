/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
 */
@Schema(description = "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:00:24.051-07:00[America/Los_Angeles]")public class SourceGitSourceContext {

  @SerializedName("url")
  private String url = null;

  @SerializedName("revision_id")
  private String revisionId = null;
  public SourceGitSourceContext url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * Git repository URL.
  * @return url
  **/
  @Schema(description = "Git repository URL.")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  public SourceGitSourceContext revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  

  /**
  * Git commit hash.
  * @return revisionId
  **/
  @Schema(description = "Git commit hash.")
  public String getRevisionId() {
    return revisionId;
  }
  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceGitSourceContext sourceGitSourceContext = (SourceGitSourceContext) o;
    return Objects.equals(this.url, sourceGitSourceContext.url) &&
        Objects.equals(this.revisionId, sourceGitSourceContext.revisionId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(url, revisionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceGitSourceContext {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
