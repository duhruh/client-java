/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.ProvenanceArtifact;
import io.grafeas.model.ProvenanceCommand;
import io.grafeas.model.ProvenanceSource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
@Schema(description = "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:45:09.912-07:00[America/Los_Angeles]")public class ProvenanceBuildProvenance {

  @SerializedName("id")
  private String id = null;

  @SerializedName("project_id")
  private String projectId = null;

  @SerializedName("commands")
  private List<ProvenanceCommand> commands = null;

  @SerializedName("built_artifacts")
  private List<ProvenanceArtifact> builtArtifacts = null;

  @SerializedName("create_time")
  private OffsetDateTime createTime = null;

  @SerializedName("start_time")
  private OffsetDateTime startTime = null;

  @SerializedName("end_time")
  private OffsetDateTime endTime = null;

  @SerializedName("creator")
  private String creator = null;

  @SerializedName("logs_uri")
  private String logsUri = null;

  @SerializedName("source_provenance")
  private ProvenanceSource sourceProvenance = null;

  @SerializedName("trigger_id")
  private String triggerId = null;

  @SerializedName("build_options")
  private Map<String, String> buildOptions = null;

  @SerializedName("builder_version")
  private String builderVersion = null;
  public ProvenanceBuildProvenance id(String id) {
    this.id = id;
    return this;
  }

  

  /**
  * Required. Unique identifier of the build.
  * @return id
  **/
  @Schema(description = "Required. Unique identifier of the build.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }
  public ProvenanceBuildProvenance projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  

  /**
  * ID of the project.
  * @return projectId
  **/
  @Schema(description = "ID of the project.")
  public String getProjectId() {
    return projectId;
  }
  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }
  public ProvenanceBuildProvenance commands(List<ProvenanceCommand> commands) {
    this.commands = commands;
    return this;
  }

  public ProvenanceBuildProvenance addCommandsItem(ProvenanceCommand commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<ProvenanceCommand>();
    }
    this.commands.add(commandsItem);
    return this;
  }

  /**
  * Commands requested by the build.
  * @return commands
  **/
  @Schema(description = "Commands requested by the build.")
  public List<ProvenanceCommand> getCommands() {
    return commands;
  }
  public void setCommands(List<ProvenanceCommand> commands) {
    this.commands = commands;
  }
  public ProvenanceBuildProvenance builtArtifacts(List<ProvenanceArtifact> builtArtifacts) {
    this.builtArtifacts = builtArtifacts;
    return this;
  }

  public ProvenanceBuildProvenance addBuiltArtifactsItem(ProvenanceArtifact builtArtifactsItem) {
    if (this.builtArtifacts == null) {
      this.builtArtifacts = new ArrayList<ProvenanceArtifact>();
    }
    this.builtArtifacts.add(builtArtifactsItem);
    return this;
  }

  /**
  * Output of the build.
  * @return builtArtifacts
  **/
  @Schema(description = "Output of the build.")
  public List<ProvenanceArtifact> getBuiltArtifacts() {
    return builtArtifacts;
  }
  public void setBuiltArtifacts(List<ProvenanceArtifact> builtArtifacts) {
    this.builtArtifacts = builtArtifacts;
  }
  public ProvenanceBuildProvenance createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  

  /**
  * Time at which the build was created.
  * @return createTime
  **/
  @Schema(description = "Time at which the build was created.")
  public OffsetDateTime getCreateTime() {
    return createTime;
  }
  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }
  public ProvenanceBuildProvenance startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  

  /**
  * Time at which execution of the build was started.
  * @return startTime
  **/
  @Schema(description = "Time at which execution of the build was started.")
  public OffsetDateTime getStartTime() {
    return startTime;
  }
  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }
  public ProvenanceBuildProvenance endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  

  /**
  * Time at which execution of the build was finished.
  * @return endTime
  **/
  @Schema(description = "Time at which execution of the build was finished.")
  public OffsetDateTime getEndTime() {
    return endTime;
  }
  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }
  public ProvenanceBuildProvenance creator(String creator) {
    this.creator = creator;
    return this;
  }

  

  /**
  * E-mail address of the user who initiated this build. Note that this was the user&#x27;s e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
  * @return creator
  **/
  @Schema(description = "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.")
  public String getCreator() {
    return creator;
  }
  public void setCreator(String creator) {
    this.creator = creator;
  }
  public ProvenanceBuildProvenance logsUri(String logsUri) {
    this.logsUri = logsUri;
    return this;
  }

  

  /**
  * URI where any logs for this provenance were written.
  * @return logsUri
  **/
  @Schema(description = "URI where any logs for this provenance were written.")
  public String getLogsUri() {
    return logsUri;
  }
  public void setLogsUri(String logsUri) {
    this.logsUri = logsUri;
  }
  public ProvenanceBuildProvenance sourceProvenance(ProvenanceSource sourceProvenance) {
    this.sourceProvenance = sourceProvenance;
    return this;
  }

  

  /**
  * Get sourceProvenance
  * @return sourceProvenance
  **/
  @Schema(description = "")
  public ProvenanceSource getSourceProvenance() {
    return sourceProvenance;
  }
  public void setSourceProvenance(ProvenanceSource sourceProvenance) {
    this.sourceProvenance = sourceProvenance;
  }
  public ProvenanceBuildProvenance triggerId(String triggerId) {
    this.triggerId = triggerId;
    return this;
  }

  

  /**
  * Trigger identifier if the build was triggered automatically; empty if not.
  * @return triggerId
  **/
  @Schema(description = "Trigger identifier if the build was triggered automatically; empty if not.")
  public String getTriggerId() {
    return triggerId;
  }
  public void setTriggerId(String triggerId) {
    this.triggerId = triggerId;
  }
  public ProvenanceBuildProvenance buildOptions(Map<String, String> buildOptions) {
    this.buildOptions = buildOptions;
    return this;
  }

  
  public ProvenanceBuildProvenance putBuildOptionsItem(String key, String buildOptionsItem) {
    if (this.buildOptions == null) {
      this.buildOptions = new HashMap<String, String>();
    }
    this.buildOptions.put(key, buildOptionsItem);
    return this;
  }
  /**
  * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
  * @return buildOptions
  **/
  @Schema(description = "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.")
  public Map<String, String> getBuildOptions() {
    return buildOptions;
  }
  public void setBuildOptions(Map<String, String> buildOptions) {
    this.buildOptions = buildOptions;
  }
  public ProvenanceBuildProvenance builderVersion(String builderVersion) {
    this.builderVersion = builderVersion;
    return this;
  }

  

  /**
  * Version string of the builder at the time this build was executed.
  * @return builderVersion
  **/
  @Schema(description = "Version string of the builder at the time this build was executed.")
  public String getBuilderVersion() {
    return builderVersion;
  }
  public void setBuilderVersion(String builderVersion) {
    this.builderVersion = builderVersion;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvenanceBuildProvenance provenanceBuildProvenance = (ProvenanceBuildProvenance) o;
    return Objects.equals(this.id, provenanceBuildProvenance.id) &&
        Objects.equals(this.projectId, provenanceBuildProvenance.projectId) &&
        Objects.equals(this.commands, provenanceBuildProvenance.commands) &&
        Objects.equals(this.builtArtifacts, provenanceBuildProvenance.builtArtifacts) &&
        Objects.equals(this.createTime, provenanceBuildProvenance.createTime) &&
        Objects.equals(this.startTime, provenanceBuildProvenance.startTime) &&
        Objects.equals(this.endTime, provenanceBuildProvenance.endTime) &&
        Objects.equals(this.creator, provenanceBuildProvenance.creator) &&
        Objects.equals(this.logsUri, provenanceBuildProvenance.logsUri) &&
        Objects.equals(this.sourceProvenance, provenanceBuildProvenance.sourceProvenance) &&
        Objects.equals(this.triggerId, provenanceBuildProvenance.triggerId) &&
        Objects.equals(this.buildOptions, provenanceBuildProvenance.buildOptions) &&
        Objects.equals(this.builderVersion, provenanceBuildProvenance.builderVersion);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, projectId, commands, builtArtifacts, createTime, startTime, endTime, creator, logsUri, sourceProvenance, triggerId, buildOptions, builderVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvenanceBuildProvenance {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    builtArtifacts: ").append(toIndentedString(builtArtifacts)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    logsUri: ").append(toIndentedString(logsUri)).append("\n");
    sb.append("    sourceProvenance: ").append(toIndentedString(sourceProvenance)).append("\n");
    sb.append("    triggerId: ").append(toIndentedString(triggerId)).append("\n");
    sb.append("    buildOptions: ").append(toIndentedString(buildOptions)).append("\n");
    sb.append("    builderVersion: ").append(toIndentedString(builderVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
