/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.AttestationGenericSignedAttestationContentType;
import io.grafeas.model.V1beta1Signature;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * An attestation wrapper that uses the Grafeas &#x60;Signature&#x60; message. This attestation must define the &#x60;serialized_payload&#x60; that the &#x60;signatures&#x60; verify and any metadata necessary to interpret that plaintext.  The signatures should always be over the &#x60;serialized_payload&#x60; bytestring.
 */
@Schema(description = "An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext.  The signatures should always be over the `serialized_payload` bytestring.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:45:09.912-07:00[America/Los_Angeles]")public class AttestationGenericSignedAttestation {

  @SerializedName("content_type")
  private AttestationGenericSignedAttestationContentType contentType = null;

  @SerializedName("serialized_payload")
  private String serializedPayload = null;

  @SerializedName("signatures")
  private List<V1beta1Signature> signatures = null;
  public AttestationGenericSignedAttestation contentType(AttestationGenericSignedAttestationContentType contentType) {
    this.contentType = contentType;
    return this;
  }

  

  /**
  * Get contentType
  * @return contentType
  **/
  @Schema(description = "")
  public AttestationGenericSignedAttestationContentType getContentType() {
    return contentType;
  }
  public void setContentType(AttestationGenericSignedAttestationContentType contentType) {
    this.contentType = contentType;
  }
  public AttestationGenericSignedAttestation serializedPayload(String serializedPayload) {
    this.serializedPayload = serializedPayload;
    return this;
  }

  

  /**
  * The serialized payload that is verified by one or more &#x60;signatures&#x60;. The encoding and semantic meaning of this payload must match what is set in &#x60;content_type&#x60;.
  * @return serializedPayload
  **/
  @Schema(description = "The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.")
  public String getSerializedPayload() {
    return serializedPayload;
  }
  public void setSerializedPayload(String serializedPayload) {
    this.serializedPayload = serializedPayload;
  }
  public AttestationGenericSignedAttestation signatures(List<V1beta1Signature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public AttestationGenericSignedAttestation addSignaturesItem(V1beta1Signature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<V1beta1Signature>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

  /**
  * One or more signatures over &#x60;serialized_payload&#x60;.  Verifier implementations should consider this attestation message verified if at least one &#x60;signature&#x60; verifies &#x60;serialized_payload&#x60;.  See &#x60;Signature&#x60; in common.proto for more details on signature structure and verification.
  * @return signatures
  **/
  @Schema(description = "One or more signatures over `serialized_payload`.  Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`.  See `Signature` in common.proto for more details on signature structure and verification.")
  public List<V1beta1Signature> getSignatures() {
    return signatures;
  }
  public void setSignatures(List<V1beta1Signature> signatures) {
    this.signatures = signatures;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttestationGenericSignedAttestation attestationGenericSignedAttestation = (AttestationGenericSignedAttestation) o;
    return Objects.equals(this.contentType, attestationGenericSignedAttestation.contentType) &&
        Objects.equals(this.serializedPayload, attestationGenericSignedAttestation.serializedPayload) &&
        Objects.equals(this.signatures, attestationGenericSignedAttestation.signatures);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(contentType, serializedPayload, signatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttestationGenericSignedAttestation {\n");
    
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    serializedPayload: ").append(toIndentedString(serializedPayload)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
