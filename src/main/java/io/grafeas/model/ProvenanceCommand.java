/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Command describes a step performed as part of the build pipeline.
 */
@Schema(description = "Command describes a step performed as part of the build pipeline.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:00:24.051-07:00[America/Los_Angeles]")public class ProvenanceCommand {

  @SerializedName("name")
  private String name = null;

  @SerializedName("env")
  private List<String> env = null;

  @SerializedName("args")
  private List<String> args = null;

  @SerializedName("dir")
  private String dir = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("wait_for")
  private List<String> waitFor = null;
  public ProvenanceCommand name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to &#x60;docker pull&#x60;.
  * @return name
  **/
  @Schema(description = "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ProvenanceCommand env(List<String> env) {
    this.env = env;
    return this;
  }

  public ProvenanceCommand addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<String>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
  * Environment variables set before running this command.
  * @return env
  **/
  @Schema(description = "Environment variables set before running this command.")
  public List<String> getEnv() {
    return env;
  }
  public void setEnv(List<String> env) {
    this.env = env;
  }
  public ProvenanceCommand args(List<String> args) {
    this.args = args;
    return this;
  }

  public ProvenanceCommand addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<String>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
  * Command-line arguments used when executing this command.
  * @return args
  **/
  @Schema(description = "Command-line arguments used when executing this command.")
  public List<String> getArgs() {
    return args;
  }
  public void setArgs(List<String> args) {
    this.args = args;
  }
  public ProvenanceCommand dir(String dir) {
    this.dir = dir;
    return this;
  }

  

  /**
  * Working directory (relative to project source root) used when running this command.
  * @return dir
  **/
  @Schema(description = "Working directory (relative to project source root) used when running this command.")
  public String getDir() {
    return dir;
  }
  public void setDir(String dir) {
    this.dir = dir;
  }
  public ProvenanceCommand id(String id) {
    this.id = id;
    return this;
  }

  

  /**
  * Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
  * @return id
  **/
  @Schema(description = "Optional unique identifier for this command, used in wait_for to reference this command as a dependency.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }
  public ProvenanceCommand waitFor(List<String> waitFor) {
    this.waitFor = waitFor;
    return this;
  }

  public ProvenanceCommand addWaitForItem(String waitForItem) {
    if (this.waitFor == null) {
      this.waitFor = new ArrayList<String>();
    }
    this.waitFor.add(waitForItem);
    return this;
  }

  /**
  * The ID(s) of the command(s) that this command depends on.
  * @return waitFor
  **/
  @Schema(description = "The ID(s) of the command(s) that this command depends on.")
  public List<String> getWaitFor() {
    return waitFor;
  }
  public void setWaitFor(List<String> waitFor) {
    this.waitFor = waitFor;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvenanceCommand provenanceCommand = (ProvenanceCommand) o;
    return Objects.equals(this.name, provenanceCommand.name) &&
        Objects.equals(this.env, provenanceCommand.env) &&
        Objects.equals(this.args, provenanceCommand.args) &&
        Objects.equals(this.dir, provenanceCommand.dir) &&
        Objects.equals(this.id, provenanceCommand.id) &&
        Objects.equals(this.waitFor, provenanceCommand.waitFor);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, env, args, dir, id, waitFor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvenanceCommand {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    waitFor: ").append(toIndentedString(waitFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
