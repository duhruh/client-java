/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.BuildSignatureKeyType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Message encapsulating the signature of the verified build.
 */
@Schema(description = "Message encapsulating the signature of the verified build.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:45:09.912-07:00[America/Los_Angeles]")public class BuildBuildSignature {

  @SerializedName("public_key")
  private String publicKey = null;

  @SerializedName("signature")
  private String signature = null;

  @SerializedName("key_id")
  private String keyId = null;

  @SerializedName("key_type")
  private BuildSignatureKeyType keyType = null;
  public BuildBuildSignature publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  

  /**
  * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If &#x60;key_type&#x60; is empty, this defaults to PEM encoded public keys.  This field may be empty if &#x60;key_id&#x60; references an external key.  For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from &#x60;BuildDetails&#x60; are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: &#x60;openssl sha256 -verify public.pem -signature signature.bin signed.bin&#x60;
  * @return publicKey
  **/
  @Schema(description = "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`")
  public String getPublicKey() {
    return publicKey;
  }
  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }
  public BuildBuildSignature signature(String signature) {
    this.signature = signature;
    return this;
  }

  

  /**
  * Required. Signature of the related &#x60;BuildProvenance&#x60;. In JSON, this is base-64 encoded.
  * @return signature
  **/
  @Schema(description = "Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.")
  public String getSignature() {
    return signature;
  }
  public void setSignature(String signature) {
    this.signature = signature;
  }
  public BuildBuildSignature keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  

  /**
  * An ID for the key used to sign. This could be either an ID for the key stored in &#x60;public_key&#x60; (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
  * @return keyId
  **/
  @Schema(description = "An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).")
  public String getKeyId() {
    return keyId;
  }
  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }
  public BuildBuildSignature keyType(BuildSignatureKeyType keyType) {
    this.keyType = keyType;
    return this;
  }

  

  /**
  * Get keyType
  * @return keyType
  **/
  @Schema(description = "")
  public BuildSignatureKeyType getKeyType() {
    return keyType;
  }
  public void setKeyType(BuildSignatureKeyType keyType) {
    this.keyType = keyType;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBuildSignature buildBuildSignature = (BuildBuildSignature) o;
    return Objects.equals(this.publicKey, buildBuildSignature.publicKey) &&
        Objects.equals(this.signature, buildBuildSignature.signature) &&
        Objects.equals(this.keyId, buildBuildSignature.keyId) &&
        Objects.equals(this.keyType, buildBuildSignature.keyType);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(publicKey, signature, keyId, keyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBuildSignature {\n");
    
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
