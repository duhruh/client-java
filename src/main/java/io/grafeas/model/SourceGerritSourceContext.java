/*
 * proto/v1beta1/grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.grafeas.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.SourceAliasContext;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * A SourceContext referring to a Gerrit project.
 */
@Schema(description = "A SourceContext referring to a Gerrit project.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-14T11:45:09.912-07:00[America/Los_Angeles]")public class SourceGerritSourceContext {

  @SerializedName("host_uri")
  private String hostUri = null;

  @SerializedName("gerrit_project")
  private String gerritProject = null;

  @SerializedName("revision_id")
  private String revisionId = null;

  @SerializedName("alias_context")
  private SourceAliasContext aliasContext = null;
  public SourceGerritSourceContext hostUri(String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

  

  /**
  * The URI of a running Gerrit instance.
  * @return hostUri
  **/
  @Schema(description = "The URI of a running Gerrit instance.")
  public String getHostUri() {
    return hostUri;
  }
  public void setHostUri(String hostUri) {
    this.hostUri = hostUri;
  }
  public SourceGerritSourceContext gerritProject(String gerritProject) {
    this.gerritProject = gerritProject;
    return this;
  }

  

  /**
  * The full project name within the host. Projects may be nested, so \&quot;project/subproject\&quot; is a valid project name. The \&quot;repo name\&quot; is the hostURI/project.
  * @return gerritProject
  **/
  @Schema(description = "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.")
  public String getGerritProject() {
    return gerritProject;
  }
  public void setGerritProject(String gerritProject) {
    this.gerritProject = gerritProject;
  }
  public SourceGerritSourceContext revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  

  /**
  * A revision (commit) ID.
  * @return revisionId
  **/
  @Schema(description = "A revision (commit) ID.")
  public String getRevisionId() {
    return revisionId;
  }
  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }
  public SourceGerritSourceContext aliasContext(SourceAliasContext aliasContext) {
    this.aliasContext = aliasContext;
    return this;
  }

  

  /**
  * Get aliasContext
  * @return aliasContext
  **/
  @Schema(description = "")
  public SourceAliasContext getAliasContext() {
    return aliasContext;
  }
  public void setAliasContext(SourceAliasContext aliasContext) {
    this.aliasContext = aliasContext;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceGerritSourceContext sourceGerritSourceContext = (SourceGerritSourceContext) o;
    return Objects.equals(this.hostUri, sourceGerritSourceContext.hostUri) &&
        Objects.equals(this.gerritProject, sourceGerritSourceContext.gerritProject) &&
        Objects.equals(this.revisionId, sourceGerritSourceContext.revisionId) &&
        Objects.equals(this.aliasContext, sourceGerritSourceContext.aliasContext);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(hostUri, gerritProject, revisionId, aliasContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceGerritSourceContext {\n");
    
    sb.append("    hostUri: ").append(toIndentedString(hostUri)).append("\n");
    sb.append("    gerritProject: ").append(toIndentedString(gerritProject)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    aliasContext: ").append(toIndentedString(aliasContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
